#!/usr/bin/env python3

import jsh

class Things(dict):
	def complete(self, cli):
		return self
	def list(self, cli):
		if self:
			print('Your things:')
			for thing, desc in list(self.items()):
				print(' {0} ({1})'.format(thing, desc))
		else:
			print('No things')
	def show(self, cli, thing):
		try:
			print('{0}: {1}'.format(thing, self[thing]))
		except KeyError:
			print('No such thing {0}'.format(thing))
	def add(self, cli, thing, desc='Undescribed'):
		self[thing] = desc
	def describe(self, cli, thing, desc='Undescribed'):
		if thing in self:
			self[thing] = desc
		else:
			print('No such thing {0}'.format(thing))
	def delete(self, cli, thing):
		try:
			del self[thing]
		except KeyError:
			print('No such thing {0}'.format(thing))

things = Things()

def secrets(cli):
	print('Oi! I\'m not telling you my secrets.')

def detailed_secrets(cli):
	print('Oi! I\'m not telling you my detailed secrets.')

cli = jsh.JSH({
	'help': {
		'?': 'Show help',
		None: jsh.show_commands
	},
	'show': {
		'?': 'Show stuff',
		'things': {
			'?': 'List things',
			None: things.list
		},
		'thing': {
			'?': 'Show specific thing',
			'\t': things.complete,
			str: {
				'?': ('thing', 'Thing to show'),
				None: things.show
			}
		},
        'secrets': {
            '_hidden': True,
            'detail': {
                '?': 'Detailed secrets',
                None: detailed_secrets,
            },
            None: secrets,
        },
        '_flag': True,
	},
	'add': {
		'?': 'Add stuff',
		'thing': {
			'?': 'Add a thing',
			str: {
				'?': ('thing', 'Thing name'),
				None: things.add,
				'description': {
					'?': 'Set description',
					str: {
						'?': ('description', 'Description'),
						None: things.add
					}
				}
			}
		}
	},
	'set': {
		'?': 'Change stuff',
		'thing': {
			'?': 'Change a thing',
			'\t': things.complete,
			str: {
				'?': ('thing', 'Thing to change'),
				'description': {
					'?': 'Change thing description',
					str: {
						'?': ('description', 'Description'),
						None: things.describe
					}
				}
			}
		}
	},
	'delete': {
		'?': 'Delete stuff',
		'thing': {
			'?': 'Delete a thing',
			str: {
				'?': ('thing', 'Thing to delete'),
				None: things.delete
			},
			'\t': things.complete
		}
	},
	'quit': {
		'?': 'Quit',
		None: jsh.exit
	}
})

while True:
	try:
		cli.read_and_execute()
	except jsh.JSHError as err:
		print(err)
	except EOFError:
		break

